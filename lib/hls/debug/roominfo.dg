%% dependencies: annoations.dg

%% Like @tree, but rooted in current room, and shows relations and other details
%% about the room and items.

(understand command [roominfo])

(perform [roominfo])
    (room info)

(room info)
    (current room $Room)
    $Room
    (output annotations for $Room)
    (line)
    (exhaust) {
        *($Obj has parent $Room)
        (nested object info $Obj 4)
    }

(nested object info $Obj $Indent)
    ($Obj has relation $Rel)
    (space $Indent)
    $Obj $Rel
    (output annotations for $Obj)
    (line)
    ($Indent plus 4 into $ChildIndent)
    (exhaust) {
        *($Child has parent $Obj)
        (nested object info $Child $ChildIndent)
    }

%% Default room annotation:

(annotate (inherently dark $) with [inherently dark])

%% Default object annotations:

(annotate ($ blocks passage) with [blocks passage])
(annotate ($ is broken) with @broken)
(annotate ($ is hidden) with @hidden)
(annotate ($ provides light) with [provides light])
(annotate (animate $) with @animate)
(annotate (consultable $) with @consultable)
(annotate (door $) with @door)
(annotate (edible $) with @edible)
(annotate (female $) with @female)
(annotate (in-seat $) with [in seat])
(annotate (intangible $) with @intangible)
(annotate (item $) with @item)
(annotate (item $Item) with @handled)
    ($Item is handled)
(annotate (lockable $) with @lockable)
(annotate (lockable $Lockable) with @unlocked)
    ($Lockable is unlocked)
(annotate (male $) with @male)
(annotate (not here $) with [not here])
(annotate (on-seat $) with [on seat])
(annotate (opaque $) with @opaque)
(annotate (openable $) with @openable)
(annotate ($Openable is open) with @open)
    (openable $Openable)
(annotate (out of reach $) with [out of reach])
(annotate (potable $) with @potable)
(annotate (pushable $) with @pushable)
(annotate (sharp $) with @sharp)
(annotate (switchable $) with @switchable)
(annotate (switchable $Switchable) with @on)
  ($Switchable is on)
(annotate (vehicle $) with @vehicle)
(annotate (wearable $) with @wearable)

(annotate (actor container $Container) with @enterable)
    ~(room $Container)

(annotate $This with @attracted)
    (current room $Room) %% must come first
    ($Room attracts $This)