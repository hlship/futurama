(extension version)
    (line)
    Tutorial Mode 0.1 by Howard Lewis Ship

(tutorial mode is enabled)

(understand command [tutorial off])

(perform [tutorial off])
    (now) ~(tutorial mode is enabled)
    Tutorial mode has been turned off; you can re-enable tutorials with 
    (bold) tutorial on (roman).

(understand command [tutorial on])

(perform [tutorial on])
    (now) (tutorial mode is enabled)
    Tutorial mode has been turned on; you can turn it off with 
    (bold) tutorial off (roman).

(tutorial intro)
    \[This game has a built-in tutorial mode for players new to interactive fiction;
    it suggests common commands that you can try.  You can turn this off with
    (bold) tutorial off (roman)
    or back on with (bold) tutorial on (roman).\]

(late on every tick)
    (tutorial mode is enabled)
    (make tutorial suggestion)

(interface (can perform $<Suggestion with $>Operand))
(interface (narrate after suggestion $<Suggestion))

(make tutorial suggestion)
    ~(just narrated after suggestion)
    *(tutorial suggestion $Suggestion)
    ~($Suggestion has been performed)
    ~($Suggestion has been suggested)
    (can perform $Suggestion with $Operand)
    (par)
    \[(suggest $Suggestion with $Operand)\]
    (now) ($Suggestion has been suggested)

(after $Command)
    (now) ~(just narrated after suggestion)
    *(tutorial suggestion $Suggestion)
    ~($Suggestion has been performed)
    ($Suggestion is performed by $Command)
    (now) ($Suggestion has been performed)
    %% Only want to narrate the after if the suggestion has been made; otherwise
    %% the after is a non-sequitor.
    ($Suggestion has been suggested)
    %% This is clumsy, by keeps each narrate after from having to supply the (par)
    %% and brackets.
    (collect words)
       (narrate after suggestion $Suggestion)
    (into $Output)
    ~($Output = [])
    (par)
    \[
    (narrate after suggestion $Suggestion)
    \]
    (now) (just narrated after suggestion)


%% Optional rule for objects that want to override how (minimally name $) operates.

(interface (command name <$Object))

(command name $)
    (fail)

(minimally name $Object)
    (command name $Object)

(minimally name $Object)
    (collect words)
        (name $Object)
    (into $NameWords)
    (last $NameWords $Name)
    %% We assume the last word is most significant, and in a tutorial, will
    %% be sufficient to identify the object uniquely.
    $Name
