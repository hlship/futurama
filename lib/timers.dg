%% Schedule things in the future.
%% Events are records that look like actions.
%% They are scheduled N ticks in the future.
%% They are removed when triggered, as `(process event $Event)`.
%% TODO: A way to easily cull events that are no longer relevant.

(global variable (current tick 0))
(global variable (timed event queue []))

(interface (trigger $<Event in $<Ticks ticks))

(trigger $Event in $Ticks ticks)
    (current tick $Now)
    ($Now plus $Ticks into $When)
    ($Tuple = [$When | $Event])
    (timed event queue $Queue)
    (now) (timed event queue [$Tuple | $Queue])

(early on every tick)
    (current tick $Old)
    ($Old plus 1 into $Now)
    (now) (current tick $Now)

(on every tick)
    (current tick $Now)
    (timed event queue $Queue)
    (collect $Tuple)
        *($Tuple is one of $Queue)
        ([$When | $Event] = $Tuple)
        (if) ($When = $Now)
        (then)
            %% TODO: If triggering an event queues a new event, that is lost.
            %% Probably should do one pass to trigger, one pass to remove.
            (process event $Event)
            (fail)
        (endif)
    (into $NewQueue)
    (now) (timed event queue $NewQueue)

(interface (process event $<Event))

(process event $)

 %% For debugging only:

(event queue)
    (current tick $Now)
    (timed event queue $Queue)
    Now: $Now
    (exhaust) {
        *([$When | $Event] is one of $Queue)
        (line) At $When: $Event
    }
