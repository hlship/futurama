
%%
%% Debugging tools for Threaded Conversation
%%

(understand command [convinfo])

(perform [convinfo])
    (just) (conversation status)

(conversation status)
    ~(conversation partner $)
    No conversation partner.

(conversation status)
    (conversation partner $NPC)
    Conversation partner: $NPC (space) -- (space) (the $NPC)
    (if)
        ($NPC has conversation queue $Queue)
        (nonempty $Queue)
    (then)
        (line) Queue:
        (comma separated list $Queue)
        (line)
    (endif)
    (line)
    Quips:
    (line) (space 2) Current: { (current quip $Current) $Current (or) <unset> }
    (line) (space 2) Previous: { (previous quip $Prev) $Prev (or) <unset> }
    (line) (space 2) Grandparent: { (grandparent quip $Grand) $Grand (or) <unset> }
    (par)
    (discussable quips $Quips)
    (nonempty $Quips)
    (par)
    Discussable quips:
    (exhaust) {
        *($Quip is one of $Quips)
        (line)
        (space 2) 
        $Quip
        (output annotations for $Quip)
        (collect $Earlier)
            *($Quip continues from $Earlier)
        (into $Continues)
        (if) (nonempty $Continues)
        (then)
            (line) (space 4)
            Follows:
            (comma separated list $Continues )
        (endif)
        (collect $Later)
            *($Later continues from $Quip)
        (into $Followers)
        (if) (nonempty $Followers)
        (then)
            (line) (space 4)
            Followers:
            (comma separated list $Followers)
        (endif)
    }

(interface (comma separated list $<List))
(interface (comma separated list $<List $<Closure))

(comma separated list $List)
    (comma separated list $List { $_ })

(comma separated list $List $Closure)
    (comma separated list $List $Closure 0)

(comma separated list [] $ $)

(comma separated list [$First | $More] $Closure $Comma)
    (if) ($Comma = 1) (then) , (endif)
    { (query $Closure $First) (or) }
    (comma separated list $More $Closure 1)

%% Default annotations for quips:
 
(annotate (quip $Quip) with @recollected)
    (conversation partner $NPC)
    ($NPC recollects $Quip)

(annotate (repeatable $) with @repeatable)

(annotate (restrictive $) with @restrictive)

(annotate (quip $Quip) with [changes the subject])
    ($Quip changes the subject)

(annotate (dubious $) with @dubious)

(annotate ($ is relevant to current thread) with @relevant)

%% Annotations are very useful and should eventually be a stand-alone library.

%%
%% Annotations support; uses the (annotate $Object with $Annotation) predicate;
%% an annotation may be a simple value or list; these are output comma separated
%% and enclosed in parens; e.g. "(handled, provides light)"
%%

(output annotations for $Object)
    (collect $Annotation)
        *(annotate $Object with $Annotation)
    (into $Annotations)
    (if) (nonempty $Annotations)
    (then)
        (output annotations $Annotations 0)
    (endif)

(output annotations [] $)
    \)

(output annotations [$Annotation | $More] $CommaFlag)
    (if) ($CommaFlag = 0) (then) \( (else) , (endif)
    (output annotation $Annotation)
    (output annotations $More 1)

(output annotation (list $List))
    (exhaust) { *($Value is one of $List) $Value }

(output annotation $Value) $Value

%% 
%% Provide an annotation for an object, typically driven by
%% traits or per-object flags and attributes.
%%

(interface (annotate $<Object with $>Word))

%% Like @tree, but rooted in current room, and shows relations and other details
%% about the room and items.

(understand command [roominfo])

(perform [roominfo])
    (room info)

(room info)
    (current room $Room)
    $Room
    (output annotations for $Room)
    (line)
    (exhaust) {
        *($Obj has parent $Room)
        (nested object info $Obj 4)
    }

(nested object info $Obj $Indent)
    ($Obj has relation $Rel)
    (space $Indent)
    $Obj $Rel
    (output annotations for $Obj)
    (line)
    ($Indent plus 4 into $ChildIndent)
    (exhaust) {
        *($Child has parent $Obj)
        (nested object info $Child $ChildIndent)
    }

%% Default room annotation:

(annotate (inherently dark $) with [inherently dark])

%% Default object annotation:

(annotate (animate $) with @animate)

(annotate ($ is hidden) with @hidden)

(annotate ($ is locked) with @locked)

(annotate ($ is closed) with @closed)

(annotate ($ is broken) with @broken)

(annotate ($ is off) with @off)

(annotate ($ provides light) with [provides light])

%% So much of the trace output is understanding the players input, it obscures
%% the game-specific rules, so these predicates make it easy to start tracing
%% right at the point the action is processed via (try $) or (instead of $).

(interface (trace $<Action))
(trace $Action)
    (trace on)
    (stoppable) { (try $Action ) }
    (trace off)

(interface (trace instead of $<Action))
(trace instead of $Action)
    (trace on)
    (stoppable) { (instead of $Action) }
    (trace off)